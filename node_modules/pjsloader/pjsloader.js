var fs = require('fs'), path = require('path');

// Look for binary for this platform.
var binaryVersion = process.platform + '_' + process.arch;
const NODE_MODULE_VERSION = parseInt(process.versions.modules, 10);
var napiPlatArchs = ['aix_ppc64', 'darwin_x64', 'linux_ppc64', 'linux_x64', 'win32_x64', 'linux_arm', 'freebsd_ia32', 'freebsd_x64'];

// Older versions and those not compiled yet with the NAPI changes will use the old API.
if (NODE_MODULE_VERSION < 64 || napiPlatArchs.indexOf(binaryVersion) < 0 ){
  // For Node versions earlier than 10, binaries were built for each version; e.g. bin/win32_x64_v8/loader.node.
  // For Node 10 and higher, one binary is forward compatible; N-API versions are installed like bin/win32_x64/loader.node
  binaryVersion += '_' + process.version.split('.')[0];
}

var modPath = path.join(__dirname, 'bin', binaryVersion, 'loader');

try {
	fs.statSync(modPath + '.node');
} catch (ex) {
	// No binary!
	console.error(
		'## There is an issue with `pjsloader` ##\n'+
		'`' + modPath + '.node` is missing.\n\n'+
		'Try running this to fix the issue: '+ process.execPath+ ' '+ __dirname.replace(' ', '\\ ') + '/build'
	);
	throw new Error('Missing binary. See message above.');
}

// Pull in loader implementation
module.exports = require(modPath).Loader;
